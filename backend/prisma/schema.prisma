// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèles pour la plateforme d'affiliation YouTube

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  username    String   @unique
  role        Role     @default(AFFILIATE) // CREATOR, AFFILIATE, ADMIN
  balance     Float    @default(0)
  referredBy  String?  // ID de l'utilisateur qui l'a parrainé
  lastClickAt DateTime? // Dernier clic pour anti-fraude
  deviceId    String?   // Fingerprint device pour éviter multi-views
  level       UserLevel @default(BRONZE) // Système de niveaux
  totalEarned Float     @default(0) // Total gagné depuis inscription
  missionsCompleted Int @default(0) // Nombre de missions effectuées
  phoneNumber String?   // Pour notifications SMS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campaigns       Campaign[]
  affiliateLinks  AffiliateLink[]
  clicks          Click[]
  views           View[]
  commissions     Commission[]
  payouts         Payout[]
  balanceLogs     UserBalanceLog[]
  missions        UserMission[]
  notifications   CampaignNotification[]
  referrer        User?         @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals       User[]        @relation("UserReferrals")

  @@map("users")
  @@index([deviceId]) // Index pour anti-fraude device
  @@index([level]) // Index pour système de niveaux
  @@index([referredBy]) // Index pour parrainages
}

model Campaign {
  id          String   @id @default(cuid())
  title       String
  description String?
  youtubeUrl  String
  videoId     String   // ID de la vidéo YouTube
  costPerView Float    @default(0.01) // Coût par vue
  totalViews  Int      @default(0)
  maxViews    Int      // Objectif de vues obligatoire
  status      CampaignStatus @default(ACTIVE)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id])
  affiliateLinks  AffiliateLink[]
  views           View[]
  notifications   CampaignNotification[]

  @@map("campaigns")
  @@index([status]) // Index pour filtrage actif/inactif
  @@index([userId, status]) // Index pour campagnes utilisateur
}

model AffiliateLink {
  id         String   @id @default(cuid())
  token      String   @unique // Token unique pour le lien
  campaignId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  clicks   Click[]
  views    View[]

  @@map("affiliate_links")
  @@index([token]) // Index pour recherche rapide des liens
  @@index([userId, campaignId]) // Index pour requêtes utilisateur/campagne
}

model Click {
  id             String   @id @default(cuid())
  affiliateLinkId String
  userId         String?
  ipAddress      String
  userAgent      String?
  referrer       String?
  isValid        Boolean  @default(true)
  fraudScore     Float    @default(0) // Score de fraude (0-1)
  createdAt      DateTime @default(now())

  // Relations
  affiliateLink AffiliateLink @relation(fields: [affiliateLinkId], references: [id])
  user          User?         @relation(fields: [userId], references: [id])

  @@map("clicks")
  @@index([affiliateLinkId, createdAt]) // Index pour tracking haute fréquence
  @@index([ipAddress]) // Index pour détection fraude IP
}

model View {
  id             String   @id @default(cuid())
  affiliateLinkId String
  campaignId     String
  userId         String?
  ipAddress      String
  userAgent      String?
  watchTime      Int?     // durée minimale pour valider une vue (30s)
  isValid        Boolean  @default(false) // Validée par cron job ou IA
  fraudScore     Float    @default(0) // Score calculé par IA (0-1)
  createdAt      DateTime @default(now())
  validatedAt    DateTime? // Timestamp validation IA/cron

  // Relations
  affiliateLink AffiliateLink @relation(fields: [affiliateLinkId], references: [id])
  campaign      Campaign      @relation(fields: [campaignId], references: [id])
  user          User?         @relation(fields: [userId], references: [id])
  commission    Commission?

  @@map("views")
  @@index([affiliateLinkId, isValid]) // Index pour validation des vues
  @@index([campaignId, createdAt]) // Index pour stats campagnes
  @@index([ipAddress, createdAt]) // Index anti-fraude
  @@index([userId, createdAt]) // Index pour stats par utilisateur
}

model Commission {
  id        String   @id @default(cuid())
  userId    String
  viewId    String   @unique // Une commission par vue
  amount    Float
  level     Int      @default(1) // Niveau 1, 2, 3
  status    CommissionStatus @default(PENDING)
  createdAt DateTime @default(now())
  paidAt    DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id])
  view View @relation(fields: [viewId], references: [id])

  @@map("commissions")
  @@index([userId, status]) // Index pour calculs de balance
  @@index([level, status]) // Index pour stats niveaux
  @@index([userId, level, createdAt]) // Index pour calculs rapides multi-niveaux
}

model Payout {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  method      PayoutMethod
  status      PayoutStatus @default(PENDING)
  paypalEmail String?  // Pour PayPal
  bankDetails String?  // Pour virement bancaire
  createdAt   DateTime @default(now())
  processedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("payouts")
}

// Enums
enum Role {
  CREATOR
  AFFILIATE
  ADMIN
}

enum UserLevel {
  BRONZE     // 0-1000 Ar gagnés
  SILVER     // 1000-5000 Ar gagnés
  GOLD       // 5000-15000 Ar gagnés
  PLATINUM   // 15000-50000 Ar gagnés
  DIAMOND    // 50000+ Ar gagnés
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum PayoutMethod {
  PAYPAL
  BANK_TRANSFER
  CRYPTO
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Tables pour la sécurité anti-fraude
model BlacklistedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  blockedAt DateTime @default(now())
  blockedBy String?  // ID admin

  @@map("blacklisted_ips")
}

model RequestLog {
  id        String   @id @default(cuid())
  ipAddress String
  endpoint  String
  method    String
  userAgent String?
  referrer  String?
  createdAt DateTime @default(now())

  @@map("request_logs")
  @@index([ipAddress, createdAt])
  @@index([endpoint, createdAt])
}

model FraudLog {
  id        String   @id @default(cuid())
  ipAddress String
  score     Float
  details   Json?
  endpoint  String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("fraud_logs")
  @@index([ipAddress, createdAt])
  @@index([score])
}

// Table intermédiaire pour tracking des balances
model UserBalanceLog {
  id          String   @id @default(cuid())
  userId      String
  amount      Float    // Montant ajouté/retrait
  type        BalanceLogType // COMMISSION, PAYOUT, BONUS
  description String?  // Description de l'opération
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("user_balance_logs")
  @@index([userId, createdAt]) // Index pour historique balance
}

enum BalanceLogType {
  COMMISSION
  PAYOUT
  BONUS
  CORRECTION
  CREATOR_FIRST_VIEW    // 100 Ar pour première vue créateur
  REFERRAL_BONUS        // 1000 Ar pour parrainage
  MISSION_COMPLETED     // Récompense mission
  LEVEL_UPGRADE         // Bonus montée de niveau
}

// Table pour les notifications de campagne
model CampaignNotification {
  id          String   @id @default(cuid())
  campaignId  String
  userId      String   // Affilié notifié
  type        NotificationType
  message     String
  sentAt      DateTime?
  readAt      DateTime?
  createdAt   DateTime @default(now())

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("campaign_notifications")
  @@index([userId, readAt]) // Index pour notifications non lues
  @@index([campaignId, createdAt]) // Index par campagne
}

enum NotificationType {
  CAMPAIGN_CREATED     // Nouvelle campagne disponible
  CAMPAIGN_COMPLETED   // Campagne terminée
  COMMISSION_EARNED    // Commission gagnée
  PAYOUT_AVAILABLE     // Paiement disponible
  LEVEL_UPGRADED       // Montée de niveau
  MISSION_COMPLETED    // Mission accomplie
}

// Table pour les missions utilisateur
model UserMission {
  id          String   @id @default(cuid())
  userId      String
  missionType MissionType
  status      MissionStatus @default(PENDING)
  reward      Float    // Récompense en Ariary
  completedAt DateTime?
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("user_missions")
  @@index([userId, status]) // Index pour missions actives
}

enum MissionType {
  CREATE_FIRST_CAMPAIGN    // Créer première campagne
  GET_FIRST_AFFILIATE      // Obtenir premier affilié
  EARN_FIRST_COMMISSION    // Gagner première commission
  REACH_1000_VIEWS         // Atteindre 1000 vues totales
  REFER_5_USERS           // Parrainer 5 utilisateurs
  COMPLETE_PROFILE        // Compléter le profil
}

enum MissionStatus {
  PENDING
  COMPLETED
  REWARDED
}
