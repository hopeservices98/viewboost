generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id @default(cuid())
  email             String                 @unique
  password          String
  username          String                 @unique
  role              Role                   @default(AFFILIATE)
  balance           Float                  @default(0)
  referredBy        String?
  lastClickAt       DateTime?
  deviceId          String?
  level             UserLevel              @default(BRONZE)
  totalEarned       Float                  @default(0)
  missionsCompleted Int                    @default(0)
  phoneNumber       String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  affiliateLinks    AffiliateLink[]
  notifications     CampaignNotification[]
  campaigns         Campaign[]
  clicks            Click[]
  commissions       Commission[]
  payouts           Payout[]
  balanceLogs       UserBalanceLog[]
  missions          UserMission[]
  referrer          User?                  @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals         User[]                 @relation("UserReferrals")
  views             View[]

  @@index([deviceId])
  @@index([level])
  @@index([referredBy])
  @@map("users")
}

model Campaign {
  id             String                 @id @default(cuid())
  title          String
  description    String?
  youtubeUrl     String
  videoId        String
  costPerView    Float                  @default(0.01)
  totalViews     Int                    @default(0)
  maxViews       Int
  status         CampaignStatus         @default(ACTIVE)
  userId         String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  affiliateLinks AffiliateLink[]
  notifications  CampaignNotification[]
  user           User                   @relation(fields: [userId], references: [id])
  views          View[]

  @@index([status])
  @@index([userId, status])
  @@map("campaigns")
}

model AffiliateLink {
  id         String   @id @default(cuid())
  token      String   @unique
  campaignId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  clicks     Click[]
  views      View[]

  @@index([token])
  @@index([userId, campaignId])
  @@map("affiliate_links")
}

model Click {
  id              String        @id @default(cuid())
  affiliateLinkId String
  userId          String?
  ipAddress       String
  userAgent       String?
  referrer        String?
  isValid         Boolean       @default(true)
  fraudScore      Float         @default(0)
  createdAt       DateTime      @default(now())
  affiliateLink   AffiliateLink @relation(fields: [affiliateLinkId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])

  @@index([affiliateLinkId, createdAt])
  @@index([ipAddress])
  @@map("clicks")
}

model View {
  id              String        @id @default(cuid())
  affiliateLinkId String
  campaignId      String
  userId          String?
  ipAddress       String
  userAgent       String?
  watchTime       Int?
  isValid         Boolean       @default(false)
  fraudScore      Float         @default(0)
  createdAt       DateTime      @default(now())
  validatedAt     DateTime?
  commission      Commission?
  affiliateLink   AffiliateLink @relation(fields: [affiliateLinkId], references: [id])
  campaign        Campaign      @relation(fields: [campaignId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])

  @@index([affiliateLinkId, isValid])
  @@index([campaignId, createdAt])
  @@index([ipAddress, createdAt])
  @@index([userId, createdAt])
  @@map("views")
}

model Commission {
  id        String           @id @default(cuid())
  userId    String
  viewId    String           @unique
  amount    Float
  level     Int              @default(1)
  status    CommissionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  paidAt    DateTime?
  user      User             @relation(fields: [userId], references: [id])
  view      View             @relation(fields: [viewId], references: [id])

  @@index([userId, status])
  @@index([level, status])
  @@index([userId, level, createdAt])
  @@map("commissions")
}

model Payout {
  id          String       @id @default(cuid())
  userId      String
  amount      Float
  method      PayoutMethod
  status      PayoutStatus @default(PENDING)
  paypalEmail String?
  bankDetails String?
  createdAt   DateTime     @default(now())
  processedAt DateTime?
  user        User         @relation(fields: [userId], references: [id])

  @@map("payouts")
}

model BlacklistedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  blockedAt DateTime @default(now())
  blockedBy String?

  @@map("blacklisted_ips")
}

model RequestLog {
  id        String   @id @default(cuid())
  ipAddress String
  endpoint  String
  method    String
  userAgent String?
  referrer  String?
  createdAt DateTime @default(now())

  @@index([ipAddress, createdAt])
  @@index([endpoint, createdAt])
  @@map("request_logs")
}

model FraudLog {
  id        String   @id @default(cuid())
  ipAddress String
  score     Float
  details   Json?
  endpoint  String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([ipAddress, createdAt])
  @@index([score])
  @@map("fraud_logs")
}

model UserBalanceLog {
  id          String         @id @default(cuid())
  userId      String
  amount      Float
  type        BalanceLogType
  description String?
  createdAt   DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@map("user_balance_logs")
}

model CampaignNotification {
  id         String           @id @default(cuid())
  campaignId String
  userId     String
  type       NotificationType
  message    String
  sentAt     DateTime?
  readAt     DateTime?
  createdAt  DateTime         @default(now())
  campaign   Campaign         @relation(fields: [campaignId], references: [id])
  user       User             @relation(fields: [userId], references: [id])

  @@index([userId, readAt])
  @@index([campaignId, createdAt])
  @@map("campaign_notifications")
}

model UserMission {
  id          String        @id @default(cuid())
  userId      String
  missionType MissionType
  status      MissionStatus @default(PENDING)
  reward      Float
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@map("user_missions")
}

enum Role {
  CREATOR
  AFFILIATE
  ADMIN
}

enum UserLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum PayoutMethod {
  PAYPAL
  BANK_TRANSFER
  CRYPTO
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum BalanceLogType {
  COMMISSION
  PAYOUT
  BONUS
  CORRECTION
  CREATOR_FIRST_VIEW
  REFERRAL_BONUS
  MISSION_COMPLETED
  LEVEL_UPGRADE
}

enum NotificationType {
  CAMPAIGN_CREATED
  CAMPAIGN_COMPLETED
  COMMISSION_EARNED
  PAYOUT_AVAILABLE
  LEVEL_UPGRADED
  MISSION_COMPLETED
}

enum MissionType {
  CREATE_FIRST_CAMPAIGN
  GET_FIRST_AFFILIATE
  EARN_FIRST_COMMISSION
  REACH_1000_VIEWS
  REFER_5_USERS
  COMPLETE_PROFILE
}

enum MissionStatus {
  PENDING
  COMPLETED
  REWARDED
}
